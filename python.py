# -*- coding: utf-8 -*-
"""Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZGlpoKGG95J3T6dnjWDRvgftbMipl1Xh

**PYTHON PRAC**

"Python is an object-oriented,interpreted,high level programming language",
"Introduced by **GuidoVanRossum** released in 1991"

**Used For**

1. Python can be used on a server to create web applications.
2. Web Development
3. Software Development
4. Mathematics
5. System Scripting

**Indentation**

1. Indentation - Spaces
2. Indentation is the spaces at beginning of a code line.
3. Python uses indentation to indicate block of code.

**Comments**

* Comments can be used 
1. to explain Python code  
2. to make the code more readable
3. to prevent execution when testing code.
4. (#)- Single Line Comment
5. (###) - Multi Line Comment
6. (''' Bujji ''') - Multi Line String

**Variables**

1. Variables are containers to store values.
2. Variable is created when we assign a value to it.
"""

#Creating Variables
x = 5
y = "Bujji"
print(x)
print(y)

x = 4       # x is of type int
x = "Sally" # x is now of type str
print(x)

"""# Type Casting

1. To specify the data type of a variable
2. Type Casting or Type Conversion is a method of changing an entity       from one data type to another


* Ex:- int   - float (Yes)
*      float - int (Yes)  
*       int  - str(Yes) 
*       str  - int(Yes, But Numbers - possible,,Alphabets&Characters - not possible)
*      float - str(Yes)
*       str  - float(Yes)      

"""

#int - float
float(9)

#float - int
int(9.0)

#int - str
str(9)

#str - int
int('9')

#str - int {character} - ValueError occurs
int('Bujji')

#float - str
str(9.0)

#str - float
float('9.0')

"""**Get the Type**

* type() function is used to get the data type of a variable
"""

x = 5
y = "Bujji"
print(type(x))
print(type(y))

x = 9
y = 'Ramanaiah'
print(x)
print(type(x))
print(y)
print(type(y))

"""**Single or Double Quotes?**

* String variables can be declared either by using single or double quotes
"""

x = "Bujji"
print(x)
# is the same as
x = 'Bujji'
print(x)

"""**Case-Sensitive**

* Variable names are case-sensitive
- It means both variable names are different
"""

a = 4
A = "Sally"
#A will not overwrite a
print(a)
print(A)

"""**Variable Names**

*   Variable can be short name like x and y (or) descriptive name like age, carname...etc

**Rules for Python variables**

1. Variable name must start with Letter or Underscore character
2. Variable name cannot start with Symbols,Numbers & Python Keywords
3. Variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ )
4. Variable names are case-sensitive (age, Age and AGE are three different variables)

**Legal variable names**
"""

myvar = "John"
my_var = "John"
_my_var = "John"
myVar = "John"
MYVAR = "John"
myvar2 = "John"


print(myvar)
print(my_var)
print(_my_var)
print(myVar)
print(MYVAR)
print(myvar2)

"""**Illegal variable names**"""

2myvar = "John"
my-var = "John"
my var = "John"

#This example will produce an error in the result

"""**Multi Words Variable Names**

* Techniques to make the words more readable

**Camel Case**

* Each word, except the first, starts with a capital letter
* myVariableName = "Bujji"

**Pascal Case**

* Each word starts with a capital letter
* MyVariableName = "Bujji"

**Snake Case**

* Each word is separated by an underscore character
* my_variable_name = "Bujji"

### Output Variables
- print() function is used to output variables
"""

x = "Python is awesome"
print(x)

"""### Ways of printing
- Comma Separated
- "+" operator to output multiple variables
"""

x = "Python"
y = "is"
z = "awesome"
print(x, y, z)

x = "Python "
y = "is "
z = "awesome"
print(x + y + z)

## Notice the space character after "Python " and "is ", without them the result would be "Pythonisawesome".

# + character works as a mathematical operator
x = 5
y = 10
print(x + y)

## when you try to combine a string and a number with the + operator in the print(), it will throw an error
x = 5
y = "John"
print(x + y)

## Possible with comma separated to combine string and number
x = 5
y = "John"
print(x, y)

"""- Global Variables : Variables that are created outside of a function
- Use : Global variables can be used both inside and outside of a function
- Local Variables : Variables that are created inside of a function
"""

## Create a variable outside of a function, and use it inside the function

x = "awesome"

def myfunc():
  print("Python is " + x)

myfunc()

## Create a variable inside a function, with the same name as the global variable

x = "awesome"

def myfunc():
  x = "fantastic"
  print("Python is " + x)

myfunc()

print("Python is " + x)

"""- global Keyword
- To create a global variable inside a function,use the global keyword then the variable belongs to the global scope.
"""

def myfunc():
  global x
  x = "fantastic"

myfunc()

print("Python is " + x)

"""- To change the value of a global variable inside a function, refer to the variable by using the global keyword"""

x = "awesome"

def myfunc():
  global x
  x = "fantastic"

myfunc()

print("Python is " + x)

"""### Arithmetic Operators
- Arithmetic operators are used for mathematical calculations.
"""

# Addition
2+3

# Subtraction
9-4

# Multiplication
5*5

# Division :- Normal division returns float values
25/5

# Integer Division :- Returns integer type values
25//5

# Complex Number :- Real+Imaginary value
7+6i

5+6j  # j is only possible ( j is reserved complex number)

# To get the Remainder use (%) symbol
25%5

# To get the exponent use (**) symbol
3**5

"""### Relational Operators
- Used for comparing the values
- Returns Boolean values T|F according to the condition
- Also called Comparison Operators
- "="  - to store particular value
- "==" - for comparison 
"""

# Equal to (=)
a = 5
a

# Double Equal to (==)
x = 7
print(x)
x == 8

# Not Equal to (!=)
3 != 9

# Less than
25 < 50

# Greater than
50 > 90

# Lessthan or Equal to
40 <= 40.99

# Greaterthan or Equal to
50.0 >= 50.1

50.1 >= 50.0

"""### Membership Operators
- To check the statement whether the data is in list or not
- in 
- not in
"""

50 in [1,2,3,4,5,6,7,8,9]

5 in [1,2,3,4,5,6]

50 not in [1,2,50,6,7]

50 not in [1,2,3,4,5]

5 and 3 in [1,2,3,4,5,6,7,8,9]

15 and 3 not in [1,2,3,4,5,6,7,8,9] # works only on 2nd digit

5,3 in [1,2,3,4,5,6,7,8,9] # only returns for 2nd digit and 1st digit will be ignored

[1,2] in [1,2,3,4,5,6,7,8,9] # list won't work

[1,2] in [[1,2],3,4,5,6,7,8,9] # works for nested list

x = 9  # for variables
9 in [1,2,3,4,5,6,7,8,x]

x = 9
9 not in [1,2,3,4,5,6,7,8,x]

"""### Boolean Conversion

"""

# Convert True to int
int(True)

# Convert False to int
int(False)

# Convert True to float
float(True)

# Convert 1 to boolean
bool(1)

# Convert 0 to boolean
bool(0)

"""### Logical Operators(AND,OR,NOT ,Remaining are bitwise operators)

- AND Operator
- 0 0 | 0
- 0 1 | 0
- 1 0 | 0 
- 1 1 | 1

- OR Operator
- 0 0 | 0
- 0 1 | 1
- 1 0 | 1
- 1 1 | 1

- XOR Operator
- 0 0 | 0
- 0 1 | 1
- 1 0 | 1
- 1 1 | 0

- NAND Operator
- 0 0 | 1
- 0 1 | 1
- 1 0 | 1
- 1 1 | 0

- NOR Operator
- 0 0 | 1
- 0 1 | 0 
- 1 0 | 0
- 1 1 | 0

- NOT Operator
- 0 | 1
- 1 | 0
- NOT (negative / negation symbol)

"""

(7>6) and (6>4)

(7==6) and (7==7)

(5>6) or (6<4)

(5<6) or (6<4)

not (7>6)

not (7<6)

~(7<6) # 6-7 = -1  "~" for subtracting

"""### Escape Operators
- Escape operators in system are used to shift to next window / other slide.
- Escape operators uses \ back slash
- 1 tab = 4 space
- \ : escape operator
- \n : new line operator
- \t : tab operator
"""

# \t
print("Hello\tHow are you")

print("Hello\t\tHow are you")

print("Hello\How are you")

print("Hello\\How are you")

print("Hello\\\How are you")

print("\tHello How are you")

# \n
print("Hello\nHow are you")

print("Hello\\nHow are you")
# it is not considering as an escape character, taking as an argument only if you give \n it will print in next line.

"""### User Input
- Python allows for user input
- Able to ask the user for input
- Python 3.6 uses the input() method
- Python 2.7 uses the raw_input() method
- raw_input() is removed from current python version
"""

username = input("Enter username:")
print("Username is: " + username)

username = raw_input("Enter username:") # not in current version 
print("Username is: " + username)

input('Enter a number:')

j = input('Name your favorite person : ')
print("My favorite person is : " + j)

"""### Strings
- String is a sequence of characters defined in single or double quotes
- It is a derived data type
- Strings are immutable.That means once defined, they cannot be changed.
"""

('Bujji')

print('Bujji')

"""### Indexing
- Each element in the sequence can be accessed by using an index represented by the array of numbers
- Positive Indexing : Positive indexing is called so due to the initialising point is from left to right series i.e., 0,1,2,3...(+line)
- Negative Indexing : Negative indexing count the elements from the end of the string. The last element is given by the index '-1'
- Indexing in Python - 0
- Indexing in R - 1

"""

Name = "Michael Jackson"

# Print the first element in the string
Name[0]

# Print the element on index 6 in the string
Name[6]

# Print the element on the 13th index in the string
Name[12]

# Print the last element in the string
Name[-1]

# Print the first element in the string
Name[-15]

Name[16] # Because upto given particular indices only it will count

"""- Slicing : Returns multiple characters from a string
- [ start : stop ]
- Stride : Returns alternate elements from a string i.e., every second element in a string
- [ start : stop : step ]
"""

# Take the slice on variable name with only index 0 to index 6
Name[0:7]

# Take the slice on variable name with only index 8 to index 11
Name[8:12]

# Get every alternative element. The elements on index 1,3,5....
Name[1::2]

# Get every alternative in the range from index 0 to index 4
Name[0:5:2]

# Print second alternative element from index 0 to index 10
Name[0:11:3]

"""- find() 
- Only the index of the first element, of substring in string will be the output.
"""

# find()
Name.find('Mic')

Name.find('ck')

Name.find('cks')

# If substring is not in the string then the output is negative
Name.find('cs')

Name.find('abc')

# upper()
# Converting all the characters in string to upper case
A = 'Today We Have A Class'
print("before upper :", A)
B = A.upper()
print("after upper :", B)

# replace()
A = 'Today We Have A Class'
B = A.replace('Class','Match')
print(A)
print(B)

x = 'i am in a class classic'
y = x.replace('class', 'a')
y